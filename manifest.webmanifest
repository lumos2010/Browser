const CACHE_NAME = 'Qantum';
const ASSETS = [
  '/index.html',
  '/manifest.webmanifest',
  '/icons/image-15.png',
  '/icons/icon-512.png',
  '/sw.js',
  '/offline.html',
  '/src/styles.css' // add your CSS path(s) if separate
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(ASSETS))
      .then(() => self.skipWaiting())
  );
});

self.addEventListener('activate', event => {
  // cleanup old caches
  event.waitUntil(
    caches.keys().then(keys =>
      Promise.all(keys.map(k => (k !== CACHE_NAME ? caches.delete(k) : null)))
    ).then(() => self.clients.claim())
  );
});

self.addEventListener('fetch', event => {
  // Only handle GET requests
  if (event.request.method !== 'GET') return;

  // Network-first for navigation requests (pages) then fallback to cache/offline
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).then(resp => {
        // optionally update cache
        const copy = resp.clone();
        caches.open(CACHE_NAME).then(c => c.put(event.request, copy));
        return resp;
      }).catch(() => caches.match('/offline.html') || caches.match('/index.html'))
    );
    return;
  }

  // For other requests (assets): cache-first
  event.respondWith(
    caches.match(event.request).then(cached =>
      cached || fetch(event.request).then(resp => {
        // optionally cache fetched response
        const r = resp.clone();
        caches.open(CACHE_NAME).then(c => c.put(event.request, r));
        return resp;
      }).catch(() => {
        // optional fallback for images / fonts etc.
        return caches.match('/icons/image-15.png');
      })
    )
  );
});
